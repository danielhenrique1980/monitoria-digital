"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNodesEdges = void 0;
var _utils = require("../utils");
var _constants = require("../constants");
/**
 * Create the nodes and edges for the react flow component
 * @param route
 * @returns 
 */
var createNodesEdges = function createNodesEdges(route) {
  var routesArray = (0, _utils.routeToArray)(route);
  var nodes = [];
  var edges = [];
  routesArray.forEach(function (current) {
    var _current$x, _current$y, _current$childrenID;
    // get colors
    var _getNodeColorsByType = (0, _utils.getNodeColorsByType)(current.type),
      color = _getNodeColorsByType.color,
      borderColor = _getNodeColorsByType.borderColor;

    //! create node
    nodes.push({
      id: current.id,
      data: {
        name: current.name,
        path: current.path,
        link: current.link,
        parentID: current.parentID,
        type: current.type,
        color: color,
        borderColor: borderColor,
        childrenID: current.childrenID,
        nextFiles: current.nextFiles,
        otherFiles: current.otherFiles
      },
      type: 'routeNode',
      position: {
        x: (_current$x = current.x) !== null && _current$x !== void 0 ? _current$x : 0,
        y: (_current$y = current.y) !== null && _current$y !== void 0 ? _current$y : 0
      },
      deletable: false,
      draggable: false,
      style: {
        width: _constants.NODE_WIDTH,
        height: _constants.NODE_HEIGHT,
        backgroundColor: color,
        border: "".concat(_constants.NODE_BORDER, "px solid ").concat(borderColor),
        borderRadius: _constants.NODE_BORDER_RADIUS,
        borderColor: borderColor,
        display: 'flex'
      }
    });

    //! create edges for children
    (_current$childrenID = current.childrenID) === null || _current$childrenID === void 0 ? void 0 : _current$childrenID.map(function (childID) {
      var _childNode$type;
      // get the child node
      var childNode = routesArray.find(function (node) {
        return node.id === childID;
      });
      var _getNodeColorsByType2 = (0, _utils.getNodeColorsByType)((_childNode$type = childNode === null || childNode === void 0 ? void 0 : childNode.type) !== null && _childNode$type !== void 0 ? _childNode$type : 'Route'),
        childColor = _getNodeColorsByType2.color,
        childBorderColor = _getNodeColorsByType2.borderColor;
      edges.push({
        id: "".concat(current.id, "-").concat(childID),
        source: current.id,
        target: childID,
        deletable: false,
        markerEnd: {
          type: "arrow",
          width: 10,
          height: 10,
          strokeWidth: 2,
          color: "".concat(childBorderColor)
        },
        style: {
          strokeWidth: _constants.NODE_BORDER * 1.5,
          stroke: "".concat(childBorderColor)
        },
        sourceHandle: (childNode === null || childNode === void 0 ? void 0 : childNode.type) === 'Group' ? 'Group' : 'Normal',
        targetHandle: (childNode === null || childNode === void 0 ? void 0 : childNode.type) === 'Group' ? 'Group' : 'Normal'
      });
    });
  });
  return {
    nodes: nodes,
    edges: edges
  };
};
exports.createNodesEdges = createNodesEdges;