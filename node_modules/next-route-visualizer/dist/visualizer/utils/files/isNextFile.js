"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNextFile = void 0;
var _fs = _interopRequireDefault(require("fs"));
var _constants = require("../../constants");
var _getFileNameExtension2 = require("./getFileNameExtension");
/**
 * Is the path an allowed file
 * @param path 
 * @returns boolean
 */
var isNextFile = function isNextFile(path) {
  try {
    var _path$split$pop;
    // Check if file
    if (!_fs["default"].lstatSync(path).isFile()) return false;

    // File name processing
    // split path by / and get last element
    var fileName = (_path$split$pop = path.split('/').pop()) !== null && _path$split$pop !== void 0 ? _path$split$pop : 'file-name-error';
    // extract file name and extension
    var _getFileNameExtension = (0, _getFileNameExtension2.getFileNameExtension)(fileName),
      fileNameWithoutExtension = _getFileNameExtension.name,
      fileExtension = _getFileNameExtension.extension;

    // Check if file name is allowed
    if (!_constants.NEXT_FILES.includes("".concat(fileNameWithoutExtension, "."))) return false;
    // Check if file extension is allowed
    if (!_constants.ALLOWED_EXTENSIONS.includes(".".concat(fileExtension))) return false;
    return true;
  } catch (error) {
    return false;
    // throw new Error(`Path ${path} is not a next file or does not exist`);
  }
};
exports.isNextFile = isNextFile;