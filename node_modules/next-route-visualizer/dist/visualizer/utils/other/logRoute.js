"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logRoute = void 0;
/**
 * For debugging purposes
 * @param route - route to log
 * @param indent - not needed for first call
 */
var logRoute = function logRoute(route, indent) {
  console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "{"));
  console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  id:   ").concat(route.data.id, ","));
  console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  name: ").concat(route.data.name, ","));
  console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  path: ").concat(route.data.path, ","));
  console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  link: ").concat(route.data.link, ","));
  console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  depth: ").concat(route.data.depth, ","));
  console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  maxSpan: ").concat(route.data.maxSpan, ","));
  console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  spanSize: ").concat(route.data.spanSize, ","));
  console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  directlySpanning: ").concat(route.data.directlySpanning, ","));
  console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  type: ").concat(route.data.type, ","));
  route.data.parentID ? console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  parentID: ").concat(route.data.parentID, ",")) : null;
  if (route.data.nextFiles) {
    console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  includedFiles: {"));
    route.data.nextFiles.map(function (file) {
      console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "    ").concat(file, ","));
    });
    console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  },"));
  }
  if (route.data.childrenID) {
    console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  childrenID: ["));
    route.data.childrenID.map(function (child) {
      console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "    ").concat(child, ","));
    });
    console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  ],"));
  }
  if (!route.children) {
    console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "},"));
    return;
  }
  console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  children: ["));
  route.children.forEach(function (child) {
    logRoute(child, "".concat(indent !== null && indent !== void 0 ? indent : '', "    "));
  });
  console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "  ]"));
  console.log("".concat(indent !== null && indent !== void 0 ? indent : '', "}"));
};
exports.logRoute = logRoute;